""
"" TextBuddy Setup
""

" Define paths
" let g:textbuddy_path = fnamemodify(resolve(expand("<sfile>:p")), ":h") . "/textbuddy"

" Source Core
" exe "source " . g:textbuddy_path . "/core/pathogen/autoload/pathogen.vim"
" exe "source " . g:textbuddy_path . "/core/textbuddy/plugin/textbuddy.vim"

""
"" Customisations
""

if filereadable(expand("~/.vimrc.before"))
  source ~/.vimrc.before
endif

""
"" Pathogen
""

" call textbuddy#add_group("colors")
" call textbuddy#add_group("tools")
" call textbuddy#add_group("langs")
" call textbuddy#add_group("extensions")

call pathogen#runtime_append_all_bundles()
call pathogen#helptags()

""
"" Basic
""

set encoding=utf-8    " utf-8
set history=20        " Command line history items
set modelines=0       " Prevent security exploits with modelines
set nocompatible      " No need vim to be vi compatible
set t_Co=256          " Set colours to 256
set undolevels=1000   " Set number of changes that can be undone
set visualbell        " Stfu son
let mapleader=","     " Change leader from \ to ,
syntax on             " Syntax highlighting
set background=dark
color solarized

""
"" UI
""

set cursorline      " Highlight current line
set number          " Show line numbers
set numberwidth=5   " For files with a 1000+ lines
set ruler           " Show cursor position all the time
set title           " Change the terminal's title

""
"" Status Bar
""

set cmdheight=2   " Increase height of command-line
set laststatus=2  " Always show status line
set noshowcmd     " Don't show incomplete commands
set showmode      " Show current mode

" Status line
set statusline=
set statusline+=%-3.3n\                       " buffer number
set statusline+=%{fugitive#statusline()}\     " fugitive
set statusline+=%f\                           " filename
set statusline+=%h%m%r%w                      " Status flags
set statusline+=\[%{strlen(&ft)?&ft:'none'}]  " File type
set statusline+=%=                            " right align remainder
set statusline+=%-14(%l,%c%V%)                " line, character
set statusline+=%<%P                          " file position

""
"" Editing
""

au FocusLost * :wa      " Save when losing focus
set autoindent          " Auto indent new lines
set formatoptions+=n    " Support for numbered/bullet lists
set lazyredraw          " Don't redraw while running macros
set matchtime=3         " Show matches duration (1/10sec)
set noequalalways       " Without setting this, ZoomWin restores windows in a way that causes
                        "   equalalways behavior to be triggered the next time CommandT is used.
set nosmarttab          " <Tab> always inserts blanks
set showmatch           " Flashes matching brackets/braces
set smartindent         " Smart auto indenting
set virtualedit=block   " Virtual edit in visual block

" Folding settings
set foldcolumn=1        " Show open / closed folds information
set foldenable          " Enable folding
set foldlevelstart=99   " All folds are open
set foldmethod=syntax   " Fold based on syntax

" Remember last location in file
au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g'\"" | endif

""
"" Whitespace
""

set backspace=2                       " Backspace through everything. 2=indent,eol,start
set expandtab                         " Use spaces, not tabs
set list listchars=tab:\ \ ,trail:Â·   " Make trailing whitespace visible
set nowrap                            " Don't wrap lines
set shiftwidth=2                      " Number of spaces for autoindent
set softtabstop=2                     " Number of spaces that a tab counts
set tabstop=2                         " Every 2 columns
let macvim_hig_shift_movement=1       " mvim shift-arrow-keys (required in vimrc)

""
"" Searching
""

set gdefault    " /g flag is on by default on substitutions
set hlsearch    " Highlight search results
set ignorecase  " Ignore CaSe when SeArching
set incsearch   " Jump to search word as you type
set smartcase   " Override ignorecase if search contains uppercase

""
"" Disbale Backup / Swap Files
""

set nobackup
set noswapfile
set nowritebackup

""
"" NERDTree
""

let NERDTreeWinSize=32
let NERDTreeShowHidden=0
let NERDTreeDirArrows=1

""
"" File Types
""

" Turn on filetype plugins
filetype plugin indent on

" Set some filetypes
au BufRead,BufNewFile {config.ru,Gemfile,Rakefile,*.rake} setf ruby
au BufRead,BufNewFile *.json setf javascript
" au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} setf markdown | call textbuddy#wrapping()
" au BufRead,BufNewFile *.txt call textbuddy#wrapping()

""
"" Mappings
""

" Make ; do the same as :
nnoremap ; :

" Clear search and remove highlighting
noremap <Leader><Space> :noh<CR>

" Strip whitespace with ,W
nnoremap <Leader>W :%s/\s\+$//<CR>:let @/=''<CR>

" Add a blank line in Normal mode
noremap <Leader><CR> :put_<CR>

" Ack
nnoremap <D-F> :Ack<Space>

" Reselect pasted text
nnoremap <Leader>v V`]

" <Tab> to indent code (Normal / Visual mode)
nmap <Tab> I<Tab><Esc>
nmap <S-Tab> ^I<BS><Esc>
vmap <Tab> >gv
vmap <S-Tab> <gv

" Disable vim help
inoremap <F1> <Esc>
nnoremap <F1> <Esc>
vnoremap <F1> <Esc>

" Upper/Lower word
nmap <Leader>u mQviwU`Q
nmap <Leader>U mQviwu`Q

" Open edit command with path of current file filled in (Normal mode)
map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

" Open a tab edit command with path of current file filled in (Normal mode)
map <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>

" Toggle NERDTree
map <Leader>n <Plug>NERDTreeTabsToggle<CR>

""
"" Wildmenu
""

set wildmenu                "wmnu:      Enhanced command-line completion
set wildmode=list:longest   "wim:       Helps wildmenu auto-completion
set wildignore+=*.git?
set wildignore+=*.sw?
set wildignore+=*.DS_Store?

""
"" Customisations
""

if filereadable(expand("~/.vimrc.after"))
  source ~/.vimrc.after
endif
